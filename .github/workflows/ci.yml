name: Nx CI Pipeline

on:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']

env:
  IMAGE_NAME: ${{ secrets.MIRZA_DOCKER_USERNAME }}/mirza

jobs:
  build:
    name: Lint and build affected projects
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.16]

    outputs:
      docs_affected: ${{ steps.check-affected.outputs.docs_affected }}
      mirza_affected: ${{ steps.check-affected.outputs.mirza_affected }}
      sahebzaman_affected: ${{ steps.check-affected.outputs.sahebzaman_affected }}

    steps:
      - name: Syncing repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Fetch base branch (for PRs)
        if: github.event.pull_request
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}

      - name: Lint projects
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            npx nx affected:lint --base=${{ github.event.pull_request.base.ref }} --head=HEAD --parallel --max-parallel=3 --skip-nx-cache
          else
            npx nx affected:lint --base=HEAD~1 --head=HEAD --parallel --max-parallel=3 --skip-nx-cache
          fi

      - name: Build projects
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            npx nx affected:build --base=${{ github.event.pull_request.base.ref }} --head=HEAD --parallel --max-parallel=3 --skip-nx-cache
          else
            npx nx affected:build --base=HEAD~1 --head=HEAD --parallel --max-parallel=3 --skip-nx-cache
          fi

      - name: Check affected
        id: check-affected
        run: |
          if [ -d "dist/apps/docs" ]; then
            echo "docs_affected=true" >> $GITHUB_OUTPUT
          else
            echo "docs_affected=false" >> $GITHUB_OUTPUT
          fi

          if [ -d "dist/apps/mirza-write" ]; then
            echo "mirza_affected=true" >> $GITHUB_OUTPUT
          else
            echo "mirza_affected=false" >> $GITHUB_OUTPUT
          fi

          if [ -d "dist/apps/sahebzaman" ]; then
            echo "sahebzaman_affected=true" >> $GITHUB_OUTPUT
          else
            echo "sahebzaman_affected=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  deploy-docs:
    name: Publish docs
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.docs_affected == 'true'

    steps:
      - name: Try to download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Deploy to Production
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: dist/apps/docs/browser

  deploy-sahebzaman:
    name: Publish sahebzaman
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.sahebzaman_affected == 'true'

    steps:
      - name: Checkout repository to get web.config
        uses: actions/checkout@v4

      - name: Try to download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Copy web.config to build directory
        run: cp ./tools/web.config dist/apps/sahebzaman/browser/

      - name: Upload files via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.SAHEBZAMAN_FTP_SERVER }}
          username: ${{ secrets.SAHEBZAMAN_FTP_USERNAME }}
          password: ${{ secrets.SAHEBZAMAN_FTP_PASSWORD }}
          local-dir: dist/apps/sahebzaman/browser/
          server-dir: ./
          dangerous-clean-slate: true

  deploy-mirza:
    name: Publish mirza
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.mirza_affected == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Define Docker TAG
        id: vars
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9_.-]/-/g')
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "TAG=${BRANCH_NAME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "Docker tag will be: ${BRANCH_NAME}-${SHORT_SHA}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.MIRZA_DOCKER_USERNAME }}
          password: ${{ secrets.MIRZA_DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.mirza -t $IMAGE_NAME:${{ steps.vars.outputs.TAG }} .
          docker tag $IMAGE_NAME:${{ steps.vars.outputs.TAG }} $IMAGE_NAME:${GITHUB_REF##*/}

      - name: Push Docker images
        run: |
          docker push $IMAGE_NAME:${{ steps.vars.outputs.TAG }}
          docker push $IMAGE_NAME:${GITHUB_REF##*/}

      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.MIRZA_KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy to K3s
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9_.-]/-/g')
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          TAG=${BRANCH_NAME}-${SHORT_SHA}
          kubectl set image deployment/angular-app angular-app=${{ secrets.MIRZA_DOCKER_USERNAME }}/mirza:$TAG
          kubectl rollout status deployment/angular-app
